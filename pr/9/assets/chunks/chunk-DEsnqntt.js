const slides = "# Redefining Projects with Nx: A Dive into the New Inference API\n\n## Craigory Coppola\n\n---\n\n<div style=\"display: grid; grid-template-columns: 1fr 1fr; height: 100%; gap: 1rem;\">\n<img src=\"/assets/devup-2023/type-safety/color.png\" style=\"width: 100%;\">\n\n<div>\n\n<h1 style=\"margin-top: 0.5rem;\"> Why Me? </h1>\n\n<ul>\n<li>Sr Engineer on Nx Core team</li>\n<li>Focus on Project Configuration + Plugins</li>\n</ul>\n\n</div>\n</div>\n\n---\n\n# So, what's Project Inference?\n\n- Inference lets Nx \"infer\" how a project is configured.\n- Introduced between Nx v13.3 and v14.0.0\n  - First as backing mechanism for package based repos\n  - Later as an experimental API for community plugins\n\n---\n\n# Why Inference?\n\nInference APIs allow Nx plugins to make Nx \"just work\" in existing repositories.\n\n- Our builtin inference APIs handle loading projects from `project.json` and `package.json` files\n- Community plugins can make Nx work without additional configuration for non-javascript projects.\n\n---\n\n# Inference API v1\n\nDriven by implementation details of Nx at the time.\n\n- `projectFilePatterns`: Identify files that represent the root of a project.\n- `registerProjectTargets`: Takes a project file and converts it to a list of project targets.\n\n---\n\n# v1 Shortcomings\n\n## Strict 1:1 mapping between project files and projects.\n\n<div class=\"logos\">\n  <div>\n  <img src=\"/assets/nx-conf-2023/angular-logo.png\"/>\n  </div>\n  <div>\n  <img src=\"/assets/nx-conf-2023/dotnet-logo.png\"/>\n  </div>\n</div>\n\n---\n\n# v1 Shortcomings (cont.)\n\n- Decoupled logic for finding project files from logic for finding project targets.\n- No way to add additional metadata to a project.\n\n---\n\n# v1 Shortcomings (cont.)\n\n- A bit confusing with overlapping API surface for project graph plugins.\n- Never marked stable.\n\n---\n\n# Project Graph API v2\n\nSplits the graph APIs into two distinct parts:\n\n- `createNodes`: Finds graph nodes based on some files on disk.\n- `createDependencies`: Finds edges to be added to the graph.\n\n---\n\n# `createNodes`\n\n`[projectFilePattern, CreateNodesFunction]`\n\n- Combines the previous inference APIs into a single API.\n- A plugin provides a pattern that identifies project files, and a function that converts matching files into graph nodes.\n\n---\n\n# V1 API Adapter\n\nNx 16.8 includes an adapter that allows v1 inference APIs to be ran as a v2 plugin.\n\n```typescript\nreturn {\n  createNodes: [\n    `*/**/${combineGlobPatterns(plugin.projectFilePatterns)}`,\n    (configFilePath) => {\n      const name = toProjectName(configFilePath);\n      return {\n        projects: {\n          [name]: {\n            root: dirname(configFilePath),\n            targets: plugin.registerProjectTargets?.(configFilePath),\n          },\n        },\n      };\n    },\n  ],\n}\n```\n\n---\n\n# Overcoming Shortcomings\n\n- No longer a 1:1 mapping between project files and projects.\n\n`CreateNodesFunction` returns a map of projects and external nodes.\n\n---\n\n# Overcoming Shortcomings\n\n- Logic for inference is encapsulated into a single method.\n- Plugins can add additional metadata to a project.\n\n---\n\n# Merged Results\n\n- If multiple plugins identify the same project, the configurations are merged.\n- Targets, Generators, Tags, and Implicit Dependencies are merged.\n- Everything else is overwritten by the last plugin that identified the project.\n- Builtin inference plugins run ***last***.\n\n---\n\n# Example: `cspell` plugin\n\n- `cspell` is a package that provides spell checking for code.\n- Quick demo of how a plugin can use the new API to add spell checking to a project.\n\n---\n\n# `createDependencies`\n\n- A bit more constrained version of `processProjectGraph`, but with a few key benefits.\n- Context object is similar, but `fileMap` and `filesToProcess` have a new shape.\n  - Each have two properties: `projectFileMap` and `nonProjectFiles`.\n  - This lets us cache dependencies that are located via a file not directly associated with a project.\n  - e.g. dependencies between external nodes read from a lock file.\n\n---\n\n# `createDependencies`\n\n- Can't add new nodes to the graph, but has 100% confidence that the nodes it depends on exist.\n- Guaranteed to run after all `createNodes` functions have run.\n\n---\n\n# `createDependencies` vs `processProjectGraph`\n\n- `processProjectGraph` takes a `ProjectGraph` and returns an updated `ProjectGraph`.\n  - Recommended pattern used `ProjectGraphBuilder`\n- `createDependencies` takes the context object and returns a list of dependencies to be added to the graph.\n  - Cases where nodes need to be added to the graph can be handled by `createNodes`.\n- No adapter for v1 API, because it doesn't fit the new API. v1 API is ran as is, and then `createDependencies` is ran.\n\n---\n\n# Supporting v1 + v2\n\n- Nx will use v2 if its available, and on v16.9 or higher.\n- Nx prior to v16.9 will fall back on v1 api exports.\n\n---\n\n# Supporting v1 + v2\n\n- Community plugins can use inline wrappers to maintain compatibility between Nx versions.\n- `createNodes` can be built from `projectFilePatterns` and `registerProjectTargets`.\n- `projectGraphProcessor` can be built from `createNodes`.\n- Export both, and Nx will use what it can.\n\n---\n\n# Example: `@nx-dotnet/core`\n\n- `@nx-dotnet/core` is a community plugin that adds support for .NET projects to Nx.\n\n???\n\nShow off in editor\n  \n---\n\n# Next Steps (Us)\n\n- Mark v2 APIs as stable.\n- Remove v1 APIs after deprecation period.\n\n---\n# Next Steps (Plugin Authors)\n\n- Check the new APIs, and provide feedback! These are still experimental, and we want to make sure they work for you.\n\n---\n\n<div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%\">\n  <img src=\"/assets/ProfilePic_cropped.png\" style=\"max-width: 30%\"/>\n  <h2>Contact + Links</h2>\n  <ul>\n    <li>Twitter (x?): @EnderAgent</li>\n    <li>https://www.linkedin.com/in/craigoryvcoppola/</li>\n    <li>https://github.com/agentender</li>\n    <li>https://craigory.dev</li>\n  </ul>\n</div>\n";

export { slides as default };
