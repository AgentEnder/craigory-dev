diff --git a/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/executor.js b/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/executor.js
index 22a3f17..c123a42 100644
--- a/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/executor.js
+++ b/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/executor.js
@@ -1,75 +1,92 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
-const devkit_1 = require("@nx/devkit");
-const child_process_1 = require("child_process");
-const fs_1 = require("fs");
-const path_1 = require("path");
-const util_1 = require("util");
-const nx_json_1 = require("nx/src/config/nx-json");
+'use strict';
+Object.defineProperty(exports, '__esModule', { value: true });
+const tslib_1 = require('tslib');
+const devkit_1 = require('@nx/devkit');
+const child_process_1 = require('child_process');
+const fs_1 = require('fs');
+const path_1 = require('path');
+const util_1 = require('util');
+const nx_json_1 = require('nx/src/config/nx-json');
 const exec = (0, util_1.promisify)(child_process_1.exec);
 function exists(path) {
-    return tslib_1.__awaiter(this, void 0, void 0, function* () {
-        return new Promise((resolve) => {
-            (0, fs_1.stat)(path, (err) => resolve(err === null));
-        });
+  return tslib_1.__awaiter(this, void 0, void 0, function* () {
+    return new Promise((resolve) => {
+      (0, fs_1.stat)(path, (err) => resolve(err === null));
     });
+  });
 }
 function deployExecutor(options) {
-    var _a, _b;
-    return tslib_1.__awaiter(this, void 0, void 0, function* () {
-        const directory = (0, path_1.join)(devkit_1.workspaceRoot, options.directory);
-        if (!(yield exists(directory))) {
-            devkit_1.logger.error(`Output directory does not exist! ${directory}`);
-            return {
-                success: false,
-            };
-        }
-        devkit_1.logger.info('Setting up git remote');
-        if (!(yield exists((0, path_1.join)(directory, '.git')))) {
-            devkit_1.logger.info(`Git repository not found, initializing a blank repository ${directory}`);
-            yield exec('git init', { cwd: directory });
-        }
-        try {
-            yield exec(`git remote add ${options.remoteName} ${options.remote}`, {
-                cwd: directory,
-            });
-        }
-        catch (_c) {
-            yield exec(`git remote set-url ${options.remoteName} ${options.remote}`, {
-                cwd: directory,
-            });
-        }
-        devkit_1.logger.info('Setting up git remote -- COMPLETE');
-        devkit_1.logger.info('Authoring Commit');
-        yield exec(`git add .`, { cwd: directory });
-        yield exec(` git commit -m "${options.commitMessage}"`, {
-            cwd: directory,
-        });
-        devkit_1.logger.info('Authoring Commit -- COMPLETE');
-        devkit_1.logger.info('Pushing to GH Pages');
-        try {
-            yield exec(`git checkout -b gh-pages`, { cwd: directory });
-        }
-        catch (_d) {
-            devkit_1.logger.warn('Resetting gh-pages branch, as it already exists.');
-            yield exec(`git checkout -B gh-pages`, { cwd: directory });
-        }
-        if (options.syncWithBaseBranch) {
-            const baseBranch = options.baseBranch || ((_b = (_a = (0, nx_json_1.readNxJson)()) === null || _a === void 0 ? void 0 : _a.affected) === null || _b === void 0 ? void 0 : _b.defaultBase) || 'master';
-            const syncStrategy = options.syncStrategy;
-            yield exec(`git ${syncStrategy} ${options.remoteName}/${baseBranch}`, {
-                cwd: directory,
-            });
-        }
-        yield exec(`git push -f --set-upstream ${options.remoteName} gh-pages`, {
-            cwd: directory,
-        });
-        devkit_1.logger.info('Pushing to GH Pages -- COMPLETE');
-        return {
-            success: true,
-        };
+  var _a, _b;
+  return tslib_1.__awaiter(this, void 0, void 0, function* () {
+    const directory = (0, path_1.join)(
+      devkit_1.workspaceRoot,
+      options.directory,
+    );
+    if (!(yield exists(directory))) {
+      devkit_1.logger.error(`Output directory does not exist! ${directory}`);
+      return {
+        success: false,
+      };
+    }
+    devkit_1.logger.info('Setting up git remote');
+    if (!(yield exists((0, path_1.join)(directory, '.git')))) {
+      devkit_1.logger.info(
+        `Git repository not found, initializing a blank repository ${directory}`,
+      );
+      yield exec('git init', { cwd: directory });
+    }
+    if (process.env.GH_TOKEN) {
+      options.remote = options.remote.replace(
+        'https://',
+        `https://github-actions:${process.env.GH_TOKEN}@`,
+      );
+    }
+    try {
+      yield exec(`git remote add ${options.remoteName} ${options.remote}`, {
+        cwd: directory,
+      });
+    } catch (_c) {
+      yield exec(`git remote set-url ${options.remoteName} ${options.remote}`, {
+        cwd: directory,
+      });
+    }
+    devkit_1.logger.info('Setting up git remote -- COMPLETE');
+    devkit_1.logger.info('Authoring Commit');
+    yield exec(`git add .`, { cwd: directory });
+    yield exec(` git commit -m "${options.commitMessage}"`, {
+      cwd: directory,
     });
+    devkit_1.logger.info('Authoring Commit -- COMPLETE');
+    devkit_1.logger.info('Pushing to GH Pages');
+    try {
+      yield exec(`git checkout -b gh-pages`, { cwd: directory });
+    } catch (_d) {
+      devkit_1.logger.warn('Resetting gh-pages branch, as it already exists.');
+      yield exec(`git checkout -B gh-pages`, { cwd: directory });
+    }
+    if (options.syncWithBaseBranch) {
+      const baseBranch =
+        options.baseBranch ||
+        ((_b =
+          (_a = (0, nx_json_1.readNxJson)()) === null || _a === void 0
+            ? void 0
+            : _a.affected) === null || _b === void 0
+          ? void 0
+          : _b.defaultBase) ||
+        'master';
+      const syncStrategy = options.syncStrategy;
+      yield exec(`git ${syncStrategy} ${options.remoteName}/${baseBranch}`, {
+        cwd: directory,
+      });
+    }
+    yield exec(`git push -f --set-upstream ${options.remoteName} gh-pages`, {
+      cwd: directory,
+    });
+    devkit_1.logger.info('Pushing to GH Pages -- COMPLETE');
+    return {
+      success: true,
+    };
+  });
 }
 exports.default = deployExecutor;
 //# sourceMappingURL=executor.js.map
diff --git a/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/schema.json b/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/schema.json
index a7ab0fc..27ad6cb 100644
--- a/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/schema.json
+++ b/node_modules/@nx-dotnet/nx-ghpages/src/executors/deploy/schema.json
@@ -29,9 +29,9 @@
       "default": "master"
     },
     "syncWithBaseBranch": {
-      "type": "string",
+      "type": "boolean",
       "description": "Indicate if the gh-pages branch should be synced with the base branch",
-      "default": "false"
+      "default": false
     },
     "syncStrategy": {
       "type": "string",
